# vi: set ts=4 expandtab:
properties:
32 bit instructions
16 registers
3 address

r0-r15 - 32bit

SP = r14
LR = r15

instruction forms
33222222222211111111110000000000
10987654321098765432109876543210
--------------------------------
00ppddddppppaaaaiiiiiiiiiiiiiiii
01ppddddppppaaaabbbbxxxxxxxxxxxx
10ppddddppiiiiiiiiiiiiiiiiiiiiii
11xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

all immediates are sign extended
all don't cares should be zero

                        00 -- immediate version
                        01 -- register,register

        alu ops
add                     0?  00 d<4> 0000 a<4> b<4>,imm<16>      a + b
sub                     0?  00 d<4> 0001 a<4> b<4>,imm<16>      a - b
rsb                     0?  00 d<4> 0010 a<4> b<4>,imm<16>      b - a
and                     0?  00 d<4> 0011 a<4> b<4>,imm<16>      a & b
or                      0?  00 d<4> 0100 a<4> b<4>,imm<16>      a | b
xor                     0?  00 d<4> 0101 a<4> b<4>,imm<16>      a ^ b
lsl                     0?  00 d<4> 0110 a<4> b<4>,imm<16>      a << b
lsr                     0?  00 d<4> 0111 a<4> b<4>,imm<16>      a >> b
asr                     0?  00 d<4> 1000 a<4> b<4>,imm<16>      a >>> b (sign extend)
mov                     0?  00 d<4> 1001 xxxx b<4>,imm<16>      b
mvb                     0?  00 d<4> 1010 xxxx b<4>,imm<16>      b & 0xffff
mvt                     0?  00 d<4> 1011 a<4> b<4>,imm<16>      a | (b << 16)

seq                     0?  00 d<4> 1100 a<4> b<4>,imm<16>      a == b
slt                     0?  00 d<4> 1101 a<4> b<4>,imm<16>      a < b
slte                    0?  00 d<4> 1110 a<4> b<4>,imm<16>      a <= b

unused                  0?  00 d<4> 1111 a<4> b<4>,imm<16>

        unused
                        0?  01 xxxx xxxxxxxxxxxxxxxxxxxxx

        load/store
ldr                     0?  10 d<4> xxx0 a<4> b<4>,imm<16>      ldr Rd, [Ra + b]
str                     0?  11 d<4> xxx0 a<4> b<4>,imm<16>      str Rd, [Ra + b]

ldr                     0?  10 d<4> xxx1 xxxx b<4>,imm<16>      ldr Rd, [PC + b]
str                     0?  11 d<4> xxx1 xxxx b<4>,imm<16>      str Rd, [PC + b]

            ldr/str future expansion:
                base register update
                byte/halfword
                multireg save

        branch
b<l><z,nz>              10  0c d<4> Lz imm<22>
            L = save old PC+4 into link register
            c = do a zero/notzero test against Rd
            z = if c, test for zero or !zero in register Rd

            if !c, d<4> field xxxx

            imm<22> is shifted left 2, sign extended

b<l><z,nz>      r       10  1c d<4> Lz xx a<4> xxxxxxxxxxxx
            same as above, but register target
            bottom 2 bits of reg target ignored

            branch future expansion:
                interrupt return

        unused
                        11  xxxxxxx xxxxxxxxxxxxxxxxxxxxx

pseudo instructions:
neg     a, b        -   rsb a, b, #0
sub     a, #imm, b  -   rsb a, b, #imm
not     a, b        -   xor a, b, #0
li      a, #imm     -   mvb a, #(imm & 0xffff); mvt a, #(imm >> 16)

common algorithms:

a < b and branch - blt
slt     cr, a, b
bnz     cr

a > b and branch - bgt
slte    cr, a, b
bz      cr

a <= b and branch - blte
slte    cr, a, b
bnz     cr

a >= b and branch - bgte
slt     cr, a, b
bz      cr

a == b and branch - bge
seq     cr, a, b
bnz     cr

a != b and branch - bne
seq     cr, a, b
bz      cr

test for negative
slt     a, #0

64bit add   c = a + b
add     cl, al, bl
slt     cr, cl, al
add     ch, ah, bh
add     ch, ch, cr


